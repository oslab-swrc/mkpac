diff -uNr linux-4.4.178/drivers/net/ethernet/intel/i40e/i40e_txrx.h mkpac_txopt/drivers/net/ethernet/intel/i40e/i40e_txrx.h
--- linux-4.4.178/drivers/net/ethernet/intel/i40e/i40e_txrx.h	2019-04-03 13:23:29.000000000 +0900
+++ mkpac_txopt/drivers/net/ethernet/intel/i40e/i40e_txrx.h	2021-11-19 09:22:34.955886867 +0900
@@ -44,6 +44,14 @@
 #define I40E_MIN_INT_RATE          250     /* ~= 1000000 / (I40E_MAX_ITR * 2) */
 #define I40E_MAX_INT_RATE          500000  /* == 1000000 / (I40E_MIN_ITR * 2) */
 #define I40E_DEFAULT_IRQ_WORK      256
+
+//This value is set adaptively based on number of elements pending to be cleaned-up in TX ring
+//For small packet sizes and for 40G/100G NIC, this value is set to the maximum queue size i.e. 4096
+//as the incoming and outgoing packet per second rate is very high.//mKPAC
+#ifndef CONFIG_MKPAC_TX_LOCKS
+ #define I40E_DEFAULT_IRQ_WORK      4096
+#endif
+
 #define ITR_TO_REG(setting) ((setting & ~I40E_ITR_DYNAMIC) >> 1)
 #define ITR_IS_DYNAMIC(setting) (!!(setting & I40E_ITR_DYNAMIC))
 #define ITR_REG_TO_USEC(itr_reg) (itr_reg << 1)
diff -uNr linux-4.4.178/net/Kconfig mkpac_txopt/net/Kconfig
--- linux-4.4.178/net/Kconfig	2019-04-03 13:23:29.000000000 +0900
+++ mkpac_txopt/net/Kconfig	2021-11-19 09:22:33.979887691 +0900
@@ -395,3 +395,9 @@
 
 config HAVE_EBPF_JIT
 	bool
+
+config MKPAC_TX_LOCKS
+        def_bool n
+
+config MKPAC_I40E
+        def_bool n
diff -uNr linux-4.4.178/net/core/dev.c mkpac_txopt/net/core/dev.c
--- linux-4.4.178/net/core/dev.c	2019-04-03 13:23:29.000000000 +0900
+++ mkpac_txopt/net/core/dev.c	2021-11-19 09:22:33.995887677 +0900
@@ -2962,7 +2962,11 @@
 	if (unlikely(contended))
 		spin_lock(&q->busylock);
 
+#ifndef CONFIG_MKPAC_TX_LOCKS
 	spin_lock(root_lock);
+#endif
+
+
 	if (unlikely(test_bit(__QDISC_STATE_DEACTIVATED, &q->state))) {
 		kfree_skb(skb);
 		rc = NET_XMIT_DROP;
@@ -2996,7 +3000,9 @@
 			__qdisc_run(q);
 		}
 	}
+#ifndef CONFIG_MKPAC_TX_LOCKS
 	spin_unlock(root_lock);
+#endif
 	if (unlikely(contended))
 		spin_unlock(&q->busylock);
 	return rc;
@@ -3110,8 +3116,13 @@
 	if (dev->real_num_tx_queues != 1) {
 		const struct net_device_ops *ops = dev->netdev_ops;
 		if (ops->ndo_select_queue)
-			queue_index = ops->ndo_select_queue(dev, skb, accel_priv,
-							    __netdev_pick_tx);
+//#ifdef CONFIG_MKPAC_TX_LOCKS
+//                      queue_index = __netdev_pick_tx(dev, skb);
+//#else
+                        queue_index = ops->ndo_select_queue(dev, skb, accel_priv,
+                                                            __netdev_pick_tx);
+//#endif
+
 		else
 			queue_index = __netdev_pick_tx(dev, skb);
 
diff -uNr linux-4.4.178/net/sched/sch_generic.c mkpac_txopt/net/sched/sch_generic.c
--- linux-4.4.178/net/sched/sch_generic.c	2019-04-03 13:23:29.000000000 +0900
+++ mkpac_txopt/net/sched/sch_generic.c	2021-11-19 09:22:34.047887633 +0900
@@ -152,12 +152,16 @@
 {
 	int ret = NETDEV_TX_BUSY;
 
+
+#ifndef CONFIG_MKPAC_TX_LOCKS
+
 	/* And release qdisc */
 	spin_unlock(root_lock);
 
 	/* Note that we validate skb (GSO, checksum, ...) outside of locks */
 	if (validate)
 		skb = validate_xmit_skb_list(skb, dev);
+#endif
 
 	if (likely(skb)) {
 		HARD_TX_LOCK(dev, txq, smp_processor_id());
@@ -169,7 +173,10 @@
 		spin_lock(root_lock);
 		return qdisc_qlen(q);
 	}
-	spin_lock(root_lock);
+
+#ifndef CONFIG_MKPAC_TX_LOCKS
+        spin_lock(root_lock);
+#endif
 
 	if (dev_xmit_complete(ret)) {
 		/* Driver sent out skb successfully or skb was consumed */
